var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// # src / component.js
// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>
// Licensed under MIT

// import 'core-js/fn/array/for-each';
// import 'core-js/fn/object/assign';
// import 'core-js/fn/object/define-property';
// import 'core-js/fn/object/keys';

import { Set } from "qd-set";

export { Set };

export var COMPONENT_FEATURE_TESTS = new Set(["customevent"]);

var sSymbol = Symbol || function (x) {
  return "_" + x;
};
var sRoot = sSymbol("sroot");
var sState = sSymbol("state");

window.process = window.process || {};
window.process.env = window.process.env || {};

window.requestIdleCallback = window.requestIdleCallback || function (f) {
  return window.setTimeout(f, 0);
};
window.cancelIdleCallback = window.cancelIdleCallback || window.clearTimeout;

var Component = function Component() {
  _classCallCheck(this, Component);
};

export var componentMixin = function componentMixin() {
  var C = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Component;
  return function (_C) {
    _inherits(_class, _C);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
      key: "setupComponent",
      value: function setupComponent(el, state) {
        var defaults = this.constructor.defaults;


        if (process.env.DEBUG) {
          var _constructor = this.constructor,
              componentName = _constructor.componentName,
              sideEffects = _constructor.sideEffects;

          if (!componentName) {
            console.warn("Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.");
          }
          if (!defaults) {
            console.warn("No default properties provided. Implement a static getter called `defaults`.");
          }
          if (!sideEffects) {
            console.warn("No side effects provided. Implement a static getter called `sideEffects`.");
          }
        }

        this[sState] = Object.assign({}, defaults, state);
        this.setupProperties(this);
        this[sRoot] = this.setupShadowDOM(el);
      }
    }, {
      key: "setupShadowDOM",
      value: function setupShadowDOM(el) {
        return el;
      }
    }, {
      key: "connectComponent",
      value: function connectComponent() {}
    }, {
      key: "disconnectComponent",
      value: function disconnectComponent() {}
    }, {
      key: "adoptComponent",
      value: function adoptComponent() {}
    }, {
      key: "getRoot",
      value: function getRoot() {
        return this[sRoot];
      }
    }, {
      key: "getEl",
      value: function getEl() {
        return this[sRoot];
      }
    }, {
      key: "fireEvent",
      value: function fireEvent(eventName, data) {
        var componentName = this.constructor.componentName;

        var event = new CustomEvent(componentName + "-" + eventName, data);
        this.el.dispatchEvent(event);
      }
    }, {
      key: "setInternalState",
      value: function setInternalState(key, value) {
        this[sState][key] = value;
      }
    }, {
      key: "setupProperties",
      value: function setupProperties() {
        var _this2 = this;

        var sideEffects = this.constructor.sideEffects;


        Object.keys(this[sState]).forEach(function (key) {
          var sideEffect = sideEffects[key];
          _this2.setupProperty(key, sideEffect);
        });
      }
    }, {
      key: "setupProperty",
      value: function setupProperty(key, sideEffect) {
        var _this3 = this;

        Object.defineProperty(this, key, {
          get: function get() {
            return _this3[sState][key];
          },
          set: function set(value) {
            var oldValue = _this3[sState][key];
            _this3.setInternalState(key, value);
            if (sideEffect) sideEffect.call(_this3, value, oldValue);
          },
          enumerable: true,
          configurable: true
        });
      }
    }, {
      key: "sroot",
      get: function get() {
        return this.getRoot();
      }
    }, {
      key: "el",
      get: function get() {
        return this.getEl();
      }
    }]);

    return _class;
  }(C);
};