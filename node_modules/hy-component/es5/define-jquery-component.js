"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JQueryComponent = exports.Set = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

exports.defineJQueryComponent = defineJQueryComponent;

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _qdSet = require("qd-set");

var _common = require("./common");

var _vanilla = require("./vanilla");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // # src / define-jquery-compnent.js
// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>
// Licensed under MIT

// jQuery predates arrow functions and makes use of binding a functions's `this`,
// so that passing arrow functions results in errors in many cases.
// We modify eslint to allow passing anonymous `function`s:
/* eslint-disable func-names, consistent-return */

// import 'core-js/fn/array/for-each';
// import 'core-js/fn/object/keys';

// jQuery is an optional dependency
// eslint-disable-line import/no-extraneous-dependencies

exports.Set = _qdSet.Set;
var JQueryComponent = exports.JQueryComponent = _vanilla.VanillaComponent;

function defineJQueryComponent(name, Component) {
  var ns = name.toLowerCase();

  var Constructor = function (_Component) {
    _inherits(Constructor, _Component);

    function Constructor() {
      _classCallCheck(this, Constructor);

      return _possibleConstructorReturn(this, (Constructor.__proto__ || Object.getPrototypeOf(Constructor)).apply(this, arguments));
    }

    _createClass(Constructor, [{
      key: "setupShadowDOM",
      value: function setupShadowDOM(el) {
        this.$element = _get(Constructor.prototype.__proto__ || Object.getPrototypeOf(Constructor.prototype), "setupShadowDOM", this).call(this, (0, _jquery2.default)(el));
        return this.$element[0];
      }
    }, {
      key: "fireEvent",
      value: function fireEvent(eventName, data) {
        var event = _jquery2.default.Event(eventName + "." + ns, data);
        this.$element.trigger(event);
      }
    }]);

    return Constructor;
  }(Component);

  function plugin(option, arg) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var key = typeof option === "string" ? option : null;

    return this.each(function () {
      var $this = (0, _jquery2.default)(this);
      var data = $this.data(ns);

      if (!data) {
        var defaults = Component.defaults,
            types = Component.types;

        var dataProps = $this.data();

        Object.keys(defaults).forEach(function (dft) {
          if (dataProps[dft]) {
            var value = (0, _common.parseType)(types[dft], dataProps[dft]);
            dataProps[dft] = value != null ? value : Component.defaults[dft];
          }
        });
        var props = _jquery2.default.extend({}, dataProps, (typeof option === "undefined" ? "undefined" : _typeof(option)) === "object" && option);

        $this.data(ns, new Constructor(this, props));
      } else if (key && typeof data[key] === "function") {
        data[key].apply(data, [arg].concat(args));
      } else if ((typeof option === "undefined" ? "undefined" : _typeof(option)) === "object" && option) {
        _jquery2.default.extend(data, option);
      }
    });
  }

  var fName = ns.split(".").pop();

  var old = _jquery2.default.fn[fName];

  _jquery2.default.fn[fName] = plugin;
  _jquery2.default.fn[fName].Constructor = Constructor;

  _jquery2.default.fn[fName].noConflict = function () {
    _jquery2.default.fn[fName] = old;
    return this;
  };
}