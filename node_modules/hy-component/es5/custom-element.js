"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customElementMixin = exports.CUSTOM_ELEMENT_FEATURE_TESTS = exports.Set = undefined;

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.CustomElement = CustomElement;
exports.fragmentFromString = fragmentFromString;

var _qdSet = require("qd-set");

var _common = require("./common");

var _component = require("./component");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // # src / custom-element.js
// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>
// Licensed under MIT

// import 'core-js/fn/array/for-each';
// import 'core-js/fn/array/from';
// import 'core-js/fn/array/map';
// import 'core-js/fn/number/constructor';
// import 'core-js/fn/object/keys';
// import 'core-js/fn/object/set-prototype-of';
// import 'core-js/fn/reflect/construct';
// import 'core-js/fn/string/trim'; // used by camelcase

exports.Set = _qdSet.Set;
var CUSTOM_ELEMENT_FEATURE_TESTS = exports.CUSTOM_ELEMENT_FEATURE_TESTS = new _qdSet.Set([].concat(_toConsumableArray(_component.COMPONENT_FEATURE_TESTS), ["template", "customelements"]));

var circutBreaker = null;

var customElementMixin = exports.customElementMixin = function customElementMixin(C) {
  return function (_C) {
    _inherits(_class, _C);

    _createClass(_class, null, [{
      key: "getObservedAttributes",
      value: function getObservedAttributes() {
        var types = this.types;

        return Object.keys(types).map(function (x) {
          return (0, _common.decamelize)(x);
        });
      }
    }]);

    function _class() {
      var _ref;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args)));

      _this.setupComponent(_this, _this.getStateFromAttributes());
      return _this;
    }

    _createClass(_class, [{
      key: "reflectAttribute",
      value: function reflectAttribute(key, val) {
        var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        var attrName = (0, _common.decamelize)(key);

        if (silent) circutBreaker = attrName;

        var types = this.constructor.types;

        var type = types[key];

        if (process.env.DEBUG && (!type || !type.stringify)) {
          console.warn("No type provided for key '" + key + "'");
        }

        var attr = type.stringify(val);

        if (attr == null) {
          this.removeAttribute(attrName);
        } else {
          this.setAttribute(attrName, attr);
        }
      }

      /*
      reflectAttributes() {
        const { types } = this.constructor;
        Object.keys(types).forEach(key => this.reflectAttribute(key, this[key], true));
      }
      */

    }, {
      key: "getStateFromAttributes",
      value: function getStateFromAttributes() {
        var _this2 = this;

        var types = this.constructor.types;


        var state = {};
        Object.keys(types).forEach(function (key) {
          var attrName = (0, _common.decamelize)(key);
          var attr = _this2.hasAttribute(attrName) ? _this2.getAttribute(attrName) : null;
          var value = (0, _common.parseType)(types[key], attr);
          if (value != null) state[key] = value;
        });

        return state;
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        /* this.reflectAttributes(); */
        this.connectComponent();
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.disconnectComponent();
      }
    }, {
      key: "adoptedCallback",
      value: function adoptedCallback() {
        this.adoptComponent();
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attrName, oldAttr, attr) {
        if (circutBreaker === attrName) circutBreaker = null;else if (oldAttr !== attr) {
          var types = this.constructor.types;


          var key = (0, _common.camelCase)(attrName);
          var value = (0, _common.parseType)(types[key], attr);

          this[key] = value != null ? value : this.constructor.defaults[key];
        }
      }
    }, {
      key: "setInternalState",
      value: function setInternalState(key, value) {
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "setInternalState", this).call(this, key, value);
        this.reflectAttribute(key, value, true);
      }
    }, {
      key: "setupShadowDOM",
      value: function setupShadowDOM(el) {
        var instance = this.getTemplate();
        if (instance) {
          if ("attachShadow" in Element.prototype) {
            el.attachShadow({ mode: "open" });
            el.shadowRoot.appendChild(instance);
            return el.shadowRoot;
          }
          if (process.env.DEBUG) console.warn("Component doesnt define a template. Intentional?");
          throw Error("ShadowDOM API not supported");
        }
        return el;
      }
    }, {
      key: "getEl",
      value: function getEl() {
        return this;
      }
    }, {
      key: "getTemplate",
      value: function getTemplate() {
        var componentName = this.constructor.componentName;

        return document.querySelector("link[href*=\"" + componentName + "\"]").import.querySelector("#" + componentName + "-template").content.cloneNode(true);
      }
    }, {
      key: "template",
      get: function get() {
        return this.getTemplate();
      }
    }]);

    return _class;
  }(C);
};

// This is a drop-in replacement for `HTMLElement` which is compatible with babel.
function CustomElement() {
  var HTMLElement = typeof window.HTMLElement === "function" ? window.HTMLElement : function () {};
  return Reflect.construct(HTMLElement, [], this.__proto__.constructor); // eslint-disable-line
}

if (Object.setPrototypeOf) {
  Object.setPrototypeOf(CustomElement.prototype, HTMLElement.prototype);
  Object.setPrototypeOf(CustomElement, HTMLElement);
}

// TODO
function fragmentFromString(strHTML) {
  return document.createRange().createContextualFragment(strHTML);
}